import flet as ft

import os
import flet as ft
from db import get_inventory, add_inventory, edit_inventory, delete_inventory, get_locations, get_categories, get_statuses, filter_inventory, export_inventory, restore_db, inventory_inv_number_exists
from datetime import datetime
import shutil

SORT_FIELDS = [
    ("–ù–∞–∑–≤–∞", "name"),
    ("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "quantity"),
    ("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä", "inv_number"),
    ("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "category"),
    ("–î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", "added_at"),
    ("–ú—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è", "location_name"),
    ("–°—Ç–∞—Ç—É—Å", "status")
]

FILTER_FIELDS = [
    ("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "category"),
    ("–ú—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è", "location_id"),
    ("–°—Ç–∞—Ç—É—Å", "status")
]

# –°—Ç–∞–ª–µ –º—ñ—Å—Ü–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
IMAGES_DIR = "images"
os.makedirs(IMAGES_DIR, exist_ok=True)

# --- –î—ñ–∞–ª–æ–≥–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó/—Å—Ç–∞—Ç—É—Å—É ---
def categories_dialog(page):
    from db import get_categories, add_category, delete_category
    categories = get_categories()

    def add_category_dialog_inner(page):
        new_cat = ft.TextField(label="–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è", width=200)
        def save_new_cat(e):
            try:
                add_category(new_cat.value)
                page.snack_bar = ft.SnackBar(ft.Text(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—é '{new_cat.value}' –¥–æ–¥–∞–Ω–æ!"), open=True)
                page.dialog.open = False
                refresh_inventory(page)
                if hasattr(page, 'inventory_container'):
                    page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
                categories_dialog(page)
                page.update()
            except Exception as ex:
                page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {ex}"), open=True)
                page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"),
            content=new_cat,
            actions=[ft.TextButton("–î–æ–¥–∞—Ç–∏", on_click=save_new_cat), ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    def edit_category_dialog(page, cat_name):
        from db import edit_category  # Must exist: edit_category(old_name, new_name)
        new_name = ft.TextField(label="–ù–æ–≤–∞ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", value=cat_name, width=200)
        def on_save(e):
            try:
                edit_category(cat_name, new_name.value)
                page.dialog.open = False
                refresh_inventory(page)
                if hasattr(page, 'inventory_container'):
                    page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
                categories_dialog(page)
                page.update()
            except Exception as ex:
                page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {ex}"), open=True)
                page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"),
            content=new_name,
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–ó–±–µ—Ä–µ–≥—Ç–∏", on_click=on_save),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    def delete_category_confirm(page, cat_name):
        def on_delete(e):
            delete_category(cat_name)
            page.dialog.open = False
            refresh_inventory(page)
            if hasattr(page, 'inventory_container'):
                page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
            categories_dialog(page)
            page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text(f"–í–∏–¥–∞–ª–∏—Ç–∏ '{cat_name}'?"),
            content=ft.Text("–í–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é?"),
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–í–∏–¥–∞–ª–∏—Ç–∏", on_click=on_delete),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    cat_rows = [
        ft.Row([
            ft.Text(cat, size=16),
            ft.IconButton(content=ft.Text("‚úèÔ∏è"), tooltip="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", on_click=lambda e, c=cat: edit_category_dialog(page, c)),
            ft.IconButton(content=ft.Text("üóëÔ∏è"), tooltip="–í–∏–¥–∞–ª–∏—Ç–∏", on_click=lambda e, c=cat: delete_category_confirm(page, c)),
        ]) for cat in categories
    ]
    add_btn = ft.ElevatedButton("–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", icon="‚ûï", on_click=lambda e: add_category_dialog_inner(page))
    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"),
        content=ft.Column([add_btn] + cat_rows, scroll=ft.ScrollMode.AUTO),
        actions=[ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()

def add_category_dialog(page):
    # For compatibility: just open categories_dialog
    categories_dialog(page)


def statuses_dialog(page):
    from db import get_statuses, add_status, delete_status
    statuses = get_statuses()

    def add_status_dialog_inner(page):
        new_status = ft.TextField(label="–ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å", width=160)
        def save_new_status(e):
            try:
                add_status(new_status.value)
                page.snack_bar = ft.SnackBar(ft.Text(f"–°—Ç–∞—Ç—É—Å '{new_status.value}' –¥–æ–¥–∞–Ω–æ!"), open=True)
                page.dialog.open = False
                refresh_inventory(page)
                if hasattr(page, 'inventory_container'):
                    page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
                statuses_dialog(page)
                page.update()
            except Exception as ex:
                page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {ex}"), open=True)
                page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"),
            content=new_status,
            actions=[ft.TextButton("–î–æ–¥–∞—Ç–∏", on_click=save_new_status), ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    def edit_status_dialog(page, status_name):
        from db import edit_status  # Must exist: edit_status(old_name, new_name)
        new_name = ft.TextField(label="–ù–æ–≤–∞ –Ω–∞–∑–≤–∞ —Å—Ç–∞—Ç—É—Å—É", value=status_name, width=160)
        def on_save(e):
            try:
                edit_status(status_name, new_name.value)
                page.dialog.open = False
                refresh_inventory(page)
                if hasattr(page, 'inventory_container'):
                    page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
                statuses_dialog(page)
                page.update()
            except Exception as ex:
                page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {ex}"), open=True)
                page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"),
            content=new_name,
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–ó–±–µ—Ä–µ–≥—Ç–∏", on_click=on_save),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    def delete_status_confirm(page, status_name):
        def on_delete(e):
            delete_status(status_name)
            page.dialog.open = False
            refresh_inventory(page)
            if hasattr(page, 'inventory_container'):
                page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
            statuses_dialog(page)
            page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text(f"–í–∏–¥–∞–ª–∏—Ç–∏ '{status_name}'?"),
            content=ft.Text("–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Å—Ç–∞—Ç—É—Å?"),
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–í–∏–¥–∞–ª–∏—Ç–∏", on_click=on_delete),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    status_rows = [
        ft.Row([
            ft.Text(status, size=16),
            ft.IconButton(content=ft.Text("‚úèÔ∏è"), tooltip="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", on_click=lambda e, s=status: edit_status_dialog(page, s)),
            ft.IconButton(content=ft.Text("üóëÔ∏è"), tooltip="–í–∏–¥–∞–ª–∏—Ç–∏", on_click=lambda e, s=status: delete_status_confirm(page, s)),
        ]) for status in statuses
    ]
    add_btn = ft.ElevatedButton("–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å", icon="‚ûï", on_click=lambda e: add_status_dialog_inner(page))
    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text("–°—Ç–∞—Ç—É—Å–∏"),
        content=ft.Column([add_btn] + status_rows, scroll=ft.ScrollMode.AUTO),
        actions=[ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()

def add_status_dialog(page):
    # For compatibility: just open statuses_dialog
    statuses_dialog(page)


# --- –û—Å–Ω–æ–≤–Ω–∏–π –≤–∏–≥–ª—è–¥ ---
def clear_filter_and_refresh(page):
    page.inv_state['filter_field'] = None
    page.inv_state['filter_value'] = ''
    # Do not reset search query!
    refresh_inventory(page)
    # Update the filter row to hide the clear filter button
    filter_row = next((c for c in page.views[0].controls if c.key == "filter_row"), None)
    if filter_row:
        clear_btn = next((c for c in filter_row.controls if hasattr(c, 'key') and c.key == "clear_filter_btn"), None)
        if clear_btn:
            clear_btn.visible = False
    page.update()

def get_filter_row(page):
    def on_search_submit(e):
        query = e.control.value
        page.inv_state['search_query'] = query
        do_inventory_search(page, query, search_field)

    def on_search_click(e):
        query = search_field.value
        page.inv_state['search_query'] = query
        do_inventory_search(page, query, search_field)

    def on_search_change(e):
        query = e.control.value
        page.inv_state['search_query'] = query
        do_inventory_search(page, query, search_field)

    search_field = ft.TextField(
        hint_text="–ü–æ—à—É–∫...",
        width=300,
        on_submit=on_search_submit,
        on_change=on_search_change,
        key="search_field",    # —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–æ–ø–æ–º–∞–≥–∞—î –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ–∫—É—Å
        autofocus=True          # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ñ–æ–∫—É—Å –ø—Ä–∏ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—ñ
    )
    page.search_field = search_field
    search_button = ft.IconButton(
        icon="search",
        tooltip="–ü–æ—à—É–∫",
        on_click=on_search_click
    )
    return ft.Row([
        search_field,
        search_button,
        ft.Container(width=16),
        ft.ElevatedButton("üîç –§—ñ–ª—å—Ç—Ä", on_click=lambda e: open_filter_dialog(page)),
        ft.ElevatedButton(
            "‚ùå –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä",
            visible=bool(page.inv_state.get('filter_field') and page.inv_state.get('filter_value')),
            on_click=lambda e: clear_filter_and_refresh(page),
            key="clear_filter_btn"
        ),
        ft.Container(width=16)
    ], key="filter_row")

def on_search_change(page, query, search_field=None):
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª—ñ –ø–æ—à—É–∫—É
    if hasattr(page, 'inventory_container'):
        do_inventory_search(page, query, search_field)
    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    page.update()

def do_inventory_search(page, query, search_field=None):
    from db import get_inventory
    all_items = get_inventory(
        sort_by='name',
        ascending=True,
        filters={page.inv_state['filter_field']: page.inv_state['filter_value']} if page.inv_state['filter_field'] and page.inv_state['filter_value'] else None
    )
    q = (query or '').lower().strip()
    if q:
        # –ü–æ—à—É–∫ —É –Ω–∞–∑–≤—ñ (1), —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—ñ (3) —Ç–∞ –æ–ø–∏—Å—ñ (11)
        search_indices = (1, 3, 11)
        filtered = [item for item in all_items if any(q in str(item[idx]).lower() for idx in search_indices if idx < len(item))]
    else:
        filtered = all_items
    page.inv_state['inventory'] = filtered
    if hasattr(page, 'inventory_container'):
        page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
    
    # –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª—ñ –ø–æ—à—É–∫—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if search_field and hasattr(search_field, 'focus'):
        search_field.focus()
    page.update()

def main_view(page: ft.Page):
    # –°—Ç–∞–Ω –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó, —Å–ø–∏—Å–∫—É, snackbar
    if not hasattr(page, 'inv_state'):
        page.inv_state = {
            'sort_by': 'name',
            'ascending': True,
            'filter_field': None,
            'filter_value': '',
            'inventory': [],
            'snackbar': None
        }
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—î –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É
    page.inventory_container = ft.Container(
        content=ft.Column(build_inventory_list(page), expand=True),
        expand=True,
        opacity=1,
        animate_opacity=ft.Animation(500, "easeInOut"),
    )
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    add_button = ft.FloatingActionButton(
        text="+",
        bgcolor="#2196F3",
        on_click=lambda e: add_edit_dialog(page),
        tooltip="–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç",
        autofocus=True,
        width=56,
        height=56,
    )

    # –û—Å–Ω–æ–≤–Ω–∏–π layout —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    page.views.clear()
    page.views.append(
        ft.View(
            "/",
            [
                get_filter_row(page),
                ft.Container(
                    ft.Column([
                        page.inventory_container
                    ], expand=True),
                    expand=True
                ),
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —è–∫ —á–∞—Å—Ç–∏–Ω—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                ft.Container(
                    content=add_button,
                    alignment=ft.alignment.bottom_right,
                    padding=ft.padding.only(bottom=20, right=20),
                    expand=True
                )
            ],
            appbar=ft.AppBar(
                title=ft.Text("–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"),
                bgcolor="#f5f5f5",
                actions=[
                    ft.Container(ft.IconButton(content=ft.Text("‚¨áÔ∏è"), tooltip="–ï–∫—Å–ø–æ—Ä—Ç", on_click=lambda e: export_dialog(page)), border=ft.border.all(1, "#bdbdbd"), border_radius=6, padding=2),
                    ft.Container(ft.IconButton(content=ft.Text("üïì"), tooltip="–ñ—É—Ä–Ω–∞–ª –∑–º—ñ–Ω", on_click=lambda e: history_dialog(page)), border=ft.border.all(1, "#bdbdbd"), border_radius=6, padding=2),
                    ft.Container(ft.IconButton(content=ft.Text("üìç"), tooltip="–ú—ñ—Å—Ü—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è", on_click=lambda e: locations_dialog(page)), border=ft.border.all(1, "#bdbdbd"), border_radius=6, padding=2),
                    ft.Container(ft.IconButton(content=ft.Text("üóÇÔ∏è"), tooltip="–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", on_click=lambda e: add_category_dialog(page)), border=ft.border.all(1, "#bdbdbd"), border_radius=6, padding=2),
                    ft.Container(ft.IconButton(content=ft.Text("üè∑Ô∏è"), tooltip="–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å", on_click=lambda e: add_status_dialog(page)), border=ft.border.all(1, "#bdbdbd"), border_radius=6, padding=2),
                ]
            ),
        )
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    page.floating_action_button = add_button
    page.update()
    refresh_inventory(page)

    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ fade-in
    page.inventory_container.opacity = 1
    page.inventory_container.update()
# DO NOT CALL main_view(page) anywhere else in the code except here at app startup

# --- CRUD, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è, –ø–æ—à—É–∫ ---

def on_search_button_click(page):
    query = page.search_field_ref.value if hasattr(page, 'search_field_ref') else ''
    print(f"[DEBUG] on_search_button_click called with query: {query}")
    page.inv_state['search_query'] = query
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—à—É–∫–æ–º
    from db import get_inventory
    all_items = get_inventory(
        sort_by='name',
        ascending=True,
        filters={page.inv_state['filter_field']: page.inv_state['filter_value']} if page.inv_state['filter_field'] and page.inv_state['filter_value'] else None
    )
    q = (query or '').lower().strip()
    if q:
        # –ü–æ—à—É–∫ —É –Ω–∞–∑–≤—ñ (1), —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—ñ (3) —Ç–∞ –æ–ø–∏—Å—ñ (10)
        search_indices = (1, 3, 11)
        filtered = [item for item in all_items if any(q in str(item[idx]).lower() for idx in search_indices if idx < len(item))]
    else:
        filtered = all_items
    page.inv_state['inventory'] = filtered
    if hasattr(page, 'inventory_container'):
        page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
        page.inventory_container.update()
    page.update()



def open_filter_dialog(page):
    from db import get_categories, get_statuses
    cats = get_categories()
    stats = get_statuses()
    filter_field = ft.Dropdown(
        label="–ü–æ–ª–µ",
        options=[ft.dropdown.Option("name", "–ù–∞–∑–≤–∞"), ft.dropdown.Option("quantity", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å"), ft.dropdown.Option("inv_number", "–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π ‚Ññ"), ft.dropdown.Option("category", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"), ft.dropdown.Option("status", "–°—Ç–∞—Ç—É—Å")],
        value=page.inv_state['filter_field'],
        width=220
    )
    filter_value = ft.TextField(label="–ó–Ω–∞—á–µ–Ω–Ω—è", value=page.inv_state['filter_value'], width=220)
    filter_category = ft.Dropdown(label="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", options=[ft.dropdown.Option(c, c) for c in cats] or [ft.dropdown.Option("", "-")], value=page.inv_state['filter_value'] if page.inv_state['filter_field']=="category" else None, width=220)
    filter_status = ft.Dropdown(label="–°—Ç–∞—Ç—É—Å", options=[ft.dropdown.Option(s, s) for s in stats], value=page.inv_state['filter_value'] if page.inv_state['filter_field']=="status" else None, width=220)
    only_with_photo = ft.Checkbox(label="–¢—ñ–ª—å–∫–∏ –∑ —Ñ–æ—Ç–æ", value=False)

    def apply_filter(e=None):
        page.inv_state['filter_field'] = filter_field.value
        if filter_field.value == "category":
            page.inv_state['filter_value'] = filter_category.value
        elif filter_field.value == "status":
            page.inv_state['filter_value'] = filter_status.value
        else:
            page.inv_state['filter_value'] = filter_value.value
        page.dialog.open = False
        refresh_inventory(page)
        # –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—è–≤–∏/–∑–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        if len(page.views[0].controls) > 0:
            filter_row = get_filter_row(page)
            page.views[0].controls[0] = filter_row
        page.update()

    def clear_filter(e=None):
        page.inv_state['filter_field'] = None
        page.inv_state['filter_value'] = ''
        try:
            filter_field.value = None
            filter_value.value = ''
            filter_category.value = None
            filter_status.value = None
            only_with_photo.value = False
            page.dialog.open = False
        except Exception:
            pass
        refresh_inventory(page)
        if len(page.views[0].controls) > 0:
            filter_row = get_filter_row(page)
            page.views[0].controls[0] = filter_row
        page.update()

    def clear_filter_and_refresh(page):
        page.inv_state['filter_field'] = None
        page.inv_state['filter_value'] = ''
        refresh_inventory(page)
        page.views[0].controls[2] = get_filter_row(page)
        page.update()

    def on_field_change(e):
        filter_value.visible = filter_field.value not in ["category", "status"]
        filter_category.visible = filter_field.value == "category"
        filter_status.visible = filter_field.value == "status"
        page.update()

    filter_field.on_change = on_field_change
    on_field_change(None)

    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text("–§—ñ–ª—å—Ç—Ä"),
        content=ft.Column([
            filter_field,
            filter_value,
            filter_category,
            filter_status,
            only_with_photo
        ], spacing=10, tight=True),
        actions=[
            ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
            ft.TextButton("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏", on_click=apply_filter),
        ],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()

def build_inventory_list(page):
    import traceback
    from db import get_inventory, delete_inventory, log_history, get_locations
    # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å id -> –Ω–∞–∑–≤–∞ –º—ñ—Å—Ü—è
    locations = get_locations()
    loc_map = {loc[0]: loc[1] for loc in locations}
    # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä, —è–∫—â–æ –ø–æ–ª–µ –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î
    filters = None
    if page.inv_state.get('filter_field') and str(page.inv_state.get('filter_value')):
        filters = {page.inv_state['filter_field']: page.inv_state['filter_value']}
    # –Ø–∫—â–æ –≤–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ—à—É–∫–æ–º ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–æ—Ç–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
    if page.inv_state.get('search_query'):
        items = page.inv_state.get('inventory', [])
    else:
        items = get_inventory(
            sort_by=page.inv_state['sort_by'],
            ascending=page.inv_state['ascending'],
            filters=filters
        )
    q = (page.inv_state.get('search_query') or '').lower().strip()
    def hl(text: str, size: int | None = None, default_color: str | None = None):
        """–ü–æ–≤–µ—Ä—Ç–∞—î ft.Text –∑ –ø—ñ–¥—Å–≤—ñ—á–µ–Ω–∏–º–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏, —â–æ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ q."""
        if not text:
            return ft.Text("", size=size, color=default_color)
        if not q:
            return ft.Text(str(text), size=size, color=default_color)
        lower = str(text).lower()
        if q not in lower:
            return ft.Text(str(text), size=size, color=default_color)

        spans: list[ft.TextSpan] = []
        pos = 0
        qlen = len(q)
        while True:
            idx = lower.find(q, pos)
            if idx == -1:
                spans.append(ft.TextSpan(str(text)[pos:], style=ft.TextStyle(color=default_color)))
                break
            # –ß–∞—Å—Ç–∏–Ω–∞ –ø–µ—Ä–µ–¥ –∑–±—ñ–≥–æ–º
            if idx > pos:
                spans.append(ft.TextSpan(str(text)[pos:idx], style=ft.TextStyle(color=default_color)))
            # –ó–±—ñ–≥
            spans.append(ft.TextSpan(
                str(text)[idx:idx+qlen],
                style=ft.TextStyle(weight=ft.FontWeight.BOLD, bgcolor="#fff59d", color=default_color)
            ))
            pos = idx + qlen
        return ft.Text(spans=spans, size=size)
    rows = []
    for idx, item in enumerate(items):
        try:
            if len(item) < 12:
                continue
            location_name = loc_map.get(item[6], "‚Äî") if item[6] else "‚Äî"
            image_cell = ft.Container(
                ft.Image(src=item[8], width=40, height=40, fit=ft.ImageFit.COVER),
                on_click=lambda e, p=item[8]: show_full_image(page, p)
            ) if item[8] else ft.Text("üñºÔ∏è")
            action_cell = ft.Row([
                ft.IconButton(icon="edit", tooltip="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", on_click=lambda e, i=item: add_edit_dialog(page, i)),
                ft.IconButton(icon="delete", tooltip="–í–∏–¥–∞–ª–∏—Ç–∏", on_click=lambda e, i=item: delete_dialog(page, i))
            ])
            row = ft.DataRow(
                cells=[
                    ft.DataCell(ft.Container(image_cell, alignment=ft.alignment.center)),  # 40x40 image, centered
                    ft.DataCell(ft.Container(hl(item[1], 14), expand=True, padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(ft.Text(str(item[2])), alignment=ft.alignment.center, padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(hl(item[3], 14), padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(ft.Text(item[4] or "‚Äî"), padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(ft.Text(item[7] or "‚Äî"), padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(ft.Text(location_name), padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(ft.Text(item[5]), padding=ft.padding.symmetric(vertical=10))),
                    ft.DataCell(ft.Container(action_cell, padding=ft.padding.symmetric(vertical=10)))
                ],
                # Modern look: subtle shadow and rounded corners for each row
                # (if supported by your Flet version)
                # If not supported, this is safe to ignore
                # shadow_color="#e3e3e3",
                # border_radius=8
            )
            rows.append(row)
        except Exception:
            pass

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó —à–∏—Ä–∏–Ω–∏ –∫–æ–ª–æ–Ω–æ–∫ (—Å—É–º–∞ = 1.0)
    col_weights = {
        "photo": 0.15,
        "name": 0.25, 
        "quantity": 0.1,
        "number": 0.15,
        "category": 0.15,
        "status": 0.1,
        "location": 0.15,
        "date": 0.1,
        "actions": 0.15
    }
    
    table = ft.DataTable(
        width=1250,
        data_row_min_height=48,  # Default row height for compact table
        heading_row_height=60,  # Slightly increased heading row height for balance,
        columns=[
            ft.DataColumn(ft.Text("–§–æ—Ç–æ")),
            ft.DataColumn(ft.Text("–ù–∞–∑–≤–∞")),
            ft.DataColumn(ft.Text("–ö-—Å—Ç—å")),
            ft.DataColumn(ft.Text("‚Ññ")),
            ft.DataColumn(ft.Text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è")),
            ft.DataColumn(ft.Text("–°—Ç–∞—Ç—É—Å")),
            ft.DataColumn(ft.Text("–ú—ñ—Å—Ü–µ")),
            ft.DataColumn(ft.Text("–î–æ–¥–∞–Ω–æ")),
            ft.DataColumn(ft.Text("–î—ñ—ó")),
        ],
        rows=rows,
        column_spacing=20,
        heading_row_color="#e0e0e0",
        data_row_color={"even": "#fafafa"},
        horizontal_margin=10,
        expand=True
    )

    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    return [table]

def add_edit_dialog(page, item=None):
    import tempfile
    import traceback
    from db import add_inventory, edit_inventory, get_locations, get_categories, get_statuses, get_custom_fields, log_history, inventory_inv_number_exists
    from datetime import datetime

    try:
        locations = get_locations()
        categories = get_categories()
        statuses = get_statuses()
        custom_fields = get_custom_fields()

        is_edit = item is not None
        title = "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞" if is_edit else "–î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞"

        # Fallback –¥–ª—è item
        item = item or [None]*12
        # –ü–æ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∏
        name = ft.TextField(label="–ù–∞–∑–≤–∞", value=item[1] if len(item)>1 and item[1] else "", width=300)
        quantity = ft.TextField(label="–ö—ñ–ª—å–∫—ñ—Å—Ç—å", value=str(item[2]) if len(item)>2 and item[2] else "1", width=100, keyboard_type=ft.KeyboardType.NUMBER)
        inv_number = ft.TextField(label="–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä", value=item[3] if len(item)>3 and item[3] else "", width=200)
        category = ft.Dropdown(label="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", options=[ft.dropdown.Option(c, c) for c in categories] or [ft.dropdown.Option("", "-")], value=item[4] if len(item)>4 and item[4] in categories else None, width=200)
        added_at = ft.TextField(label="–î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", value=item[5] if len(item)>5 and item[5] else datetime.now().strftime("%Y-%m-%d"), width=150)
        location = ft.Dropdown(label="–ú—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è", options=[ft.dropdown.Option(str(l[0]), l[1]) for l in locations] or [ft.dropdown.Option("", "-")], value=str(item[6]) if len(item)>6 and item[6] else None, width=200)
        status = ft.Dropdown(label="–°—Ç–∞—Ç—É—Å", options=[ft.dropdown.Option(s, s) for s in statuses] or [ft.dropdown.Option("", "-")], value=item[7] if len(item)>7 and item[7] in statuses else None, width=200)
        image_path = ft.Text(value=item[8] if len(item)>8 and item[8] else "", visible=False)
        image_preview = ft.Image(src=item[8], width=64, height=64) if is_edit and len(item)>8 and item[8] else ft.Text("üñºÔ∏è")
        comments = ft.TextField(label="–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ", value=item[11] if is_edit else "", multiline=True, max_lines=3, width=500)

        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –ø–æ–ª—è (JSON —É –ë–î)
        import json
        try:
            custom_vals = json.loads(item[9]) if is_edit and len(item)>9 and item[9] else {}
        except Exception:
            custom_vals = {}
        custom_inputs = []
        for f in custom_fields:
            field_id, field_name, field_type = f
            val = custom_vals.get(field_name, "")
            if field_type == 'text':
                inp = ft.TextField(label=field_name, value=val, width=200)
            elif field_type == 'number':
                inp = ft.TextField(label=field_name, value=str(val), width=120, keyboard_type=ft.KeyboardType.NUMBER)
            elif field_type == 'date':
                inp = ft.TextField(label=field_name, value=val, width=150)
            else:
                inp = ft.TextField(label=field_name, value=val, width=200)
            custom_inputs.append((field_name, inp))
    except Exception as ex:
        tb = traceback.format_exc()
        page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º—ñ: {ex}\n{tb}"), open=True)
        page.update()
        return

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å
    MAX_IMAGE_SIZE = 5 * 1024 * 1024  # 5MB
    ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png'}
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    def on_upload(e):
        if not e.files:
            return
            
        file = e.files[0]
        file_path = file.path
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        file_ext = os.path.splitext(file_path)[1].lower()
        if file_ext not in ALLOWED_EXTENSIONS:
            page.snack_bar = ft.SnackBar(
                ft.Text("–î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ JPG, JPEG –∞–±–æ PNG"), 
                open=True
            )
            page.update()
            return
            
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
        try:
            file_size = os.path.getsize(file_path)
            if file_size > MAX_IMAGE_SIZE:
                page.snack_bar = ft.SnackBar(
                    ft.Text(f"–†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â—É—î {MAX_IMAGE_SIZE/1024/1024}–ú–ë"), 
                    open=True
                )
                page.update()
                return
        except Exception as ex:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É: {ex}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ UI
        image_path.value = file_path
        image_preview.src = file_path
        image_preview.update()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        page.snack_bar = ft.SnackBar(
            ft.Text("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"),
            open=True
        )
        page.update()

    upload = ft.FilePicker(on_result=on_upload)
    if upload not in page.overlay:
        page.overlay.append(upload)
    upload_btn = ft.ElevatedButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", on_click=lambda e: upload.pick_files(allow_multiple=False, allowed_extensions=["jpg","jpeg","png"]))

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    def on_save(e):
        try:
            print("[DEBUG] on_save start")
            # Validate inputs
            if not name.value.strip():
                page.snack_bar = ft.SnackBar(ft.Text("–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç–∞!"), open=True)
                page.update()
                return
            # Safe quantity conversion
            try:
                qty_val = int(quantity.value.strip() or "0")
                print(f"[DEBUG] qty_val = {qty_val}")
            except ValueError:
                page.snack_bar = ft.SnackBar(ft.Text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–µ–≤—ñ–¥ º—î–º–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º"), open=True)
                page.update()
                return
            # Duplicate inventory number check is done later, but ensure provided number trimmed
            inv_num_trim = (inv_number.value or "").strip()
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –î–û –±—É–¥—å-—è–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Ñ–∞–π–ª–æ–º
            if inv_num_trim:
                if inventory_inv_number_exists(inv_num_trim, item[0] if is_edit else None):
                    if not hasattr(page, 'snack_bar') or page.snack_bar is None:
                        page.snack_bar = ft.SnackBar(content=ft.Text("–¢–∞–∫–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î!"), open=True)
                    else:
                        page.snack_bar.content = ft.Text("–¢–∞–∫–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î!")
                        page.snack_bar.open = True
                    page.update()
                    return
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ (–∫–æ–ø—ñ—é—î–º–æ —É IMAGES_DIR –∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
            final_image_path = image_path.value
            if final_image_path:
                try:
                    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î —Ç–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –Ω–æ–≤–æ–≥–æ
                    if is_edit and item[8] and item[8] != final_image_path and os.path.isfile(item[8]):
                        try:
                            os.remove(item[8])
                            print(f"[INFO] –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {item[8]}")
                        except Exception as del_ex:
                            print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {item[8]}: {del_ex}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –≤–∂–µ –≤ –ø–∞–ø—Ü—ñ IMAGES_DIR
                    if not os.path.commonpath([os.path.abspath(final_image_path), os.path.abspath(IMAGES_DIR)]) == os.path.abspath(IMAGES_DIR):
                        _, ext = os.path.splitext(final_image_path)
                        safe_inv = inv_num_trim or str(int(datetime.now().timestamp()))
                        new_filename = f"{safe_inv}_{int(datetime.now().timestamp())}{ext}"
                        dest_path = os.path.join(IMAGES_DIR, new_filename)
                        
                        # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª
                        shutil.copy2(final_image_path, dest_path)
                        print(f"[INFO] –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ {dest_path}")
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —à–ª—è—Ö –¥–æ –Ω–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        final_image_path = dest_path
                        
                        # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ IMAGES_DIR –∞–±–æ —Ü–µ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
                        # –§–∞–π–ª –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É
                        if os.path.dirname(final_image_path) != os.path.abspath(IMAGES_DIR):
                            # –ó–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
                            print(f"[INFO] –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑–∞–ª–∏—à–µ–Ω–æ: {final_image_path}")
                except Exception as copy_ex:
                    print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {copy_ex}")
                    page.snack_bar = ft.SnackBar(
                        ft.Text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(copy_ex)}"),
                        open=True
                    )
                    page.update()
                    return
            print(f"[DEBUG] final_image_path = {final_image_path}")
            data = {
                'name': name.value.strip(),
                'quantity': qty_val,
                'inv_number': inv_num_trim,
                'category': category.value,
                'added_at': added_at.value,
                'location_id': int(location.value) if location.value else None,
                'status': status.value,
                'image_path': final_image_path,
                'description': '',  # not used
                'comments': comments.value,
                'custom_fields': json.dumps({k: inp.value for k, inp in custom_inputs}),
            }
            if is_edit:
                print(f"[DEBUG] calling edit_inventory id={item[0]}")
                edit_inventory(item[0], data)
                log_history(item[0], "edit", f"–ó–º—ñ–Ω–µ–Ω–æ: {data['name']}")
            else:
                print("[DEBUG] calling add_inventory")
                add_inventory(data)
                log_history(None, "add", f"–î–æ–¥–∞–Ω–æ: {data['name']}")
            page.dialog.open = False
            refresh_inventory(page)
            page.snack_bar = ft.SnackBar(ft.Text("–ï–ª–µ–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"), open=True)
            page.update()
        except Exception as ex:
            page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {ex}"), open=True)
            page.update()

    # item fallback –¥–ª—è –Ω–æ–≤–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    if item is None or len(item) < 12:
        item = list(item) if item else [None]*12
        while len(item) < 12:
            item.append(None)
    # –î—ñ–∞–ª–æ–≥
    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text(title),
        content=ft.Column([
            name, quantity, inv_number, category, added_at, location, status,
            ft.Row([image_preview, upload_btn]),
            comments,
            *[inp for _, inp in custom_inputs],
        ], width=650, scroll=ft.ScrollMode.AUTO),
        actions=[
            ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
            ft.TextButton("–ó–±–µ—Ä–µ–≥—Ç–∏", on_click=on_save),
        ],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()

def delete_dialog(page, item):
    from db import delete_inventory, log_history
    delete_inventory(item[0])
    log_history(item[0], "delete", f"–í–∏–¥–∞–ª–µ–Ω–æ: {item[1]}")
    refresh_inventory(page)
    page.snack_bar = ft.SnackBar(ft.Text("–ï–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!"), open=True)
    page.update()

def export_dialog(page):
    from db import export_inventory_to_pdf, get_locations
    import time
    locs = get_locations()
    dd_loc = ft.Dropdown(
        label="–ú—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è",
        options=[ft.dropdown.Option("all", "–í—Å—ñ")] + [ft.dropdown.Option(str(l[0]), l[1]) for l in locs],
        value="all",
        width=250
    )
    def do_export(e):
        try:
            ts = int(time.time())
            filename = f"inventory_{ts}.pdf"
            loc_id = None if dd_loc.value == "all" else int(dd_loc.value)
            export_inventory_to_pdf(filename, loc_id)
            page.snack_bar = ft.SnackBar(ft.Text(f"–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É {filename}"), open=True)
            page.dialog.open = False
            page.update()
        except Exception as ex:
            page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {ex}"), open=True)
            page.update()
    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text("–ï–∫—Å–ø–æ—Ä—Ç —É PDF"),
        content=dd_loc,
        actions=[
            ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
            ft.TextButton("–ï–∫—Å–ø–æ—Ä—Ç", on_click=do_export)
        ],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()

def history_dialog(page):
    from db import get_history
    import datetime
    records = get_history()

    # –§—ñ–ª—å—Ç—Ä–∏
    filter_action = ft.Dropdown(label="–¢–∏–ø –¥—ñ—ó", options=[ft.dropdown.Option("–í—Å—ñ", "–í—Å—ñ")] + [ft.dropdown.Option(a, a) for a in sorted(set(r[2] for r in records))], value="–í—Å—ñ", width=120)
    filter_inv = ft.TextField(label="–Ü–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä", width=150)
    filter_date = ft.TextField(label="–î–∞—Ç–∞ (YYYY-MM-DD)", width=120)

    def apply_filters():
        filtered = records
        if filter_action.value and filter_action.value != "–í—Å—ñ":
            filtered = [r for r in filtered if r[2] == filter_action.value]
        if filter_inv.value:
            filtered = [r for r in filtered if filter_inv.value.lower() in (r[1] and str(r[1]).lower()) or filter_inv.value.lower() in (r[4] and str(r[4]).lower())]
        if filter_date.value:
            filtered = [r for r in filtered if r[3].startswith(filter_date.value)]
        return filtered

    def update_table(e=None):
        filtered = apply_filters()
        history_list.controls = [
            ft.Container(
                ft.Row([
                    ft.Text(str(r[0]), width=40, size=12, color="#888"),
                    ft.Text(str(r[1]), width=80, size=12),
                    ft.Text(r[2], width=60, size=12, color="#2b5" if r[2]=='add' else ("#b52" if r[2]=='delete' else "#258")),
                    ft.Text(r[3][:19], width=120, size=12, color="#888"),
                    ft.Text(r[4], size=12),
                ], spacing=8),
                bgcolor="#f7f7f7" if i%2==0 else None,
                padding=6,
                border_radius=6
            ) for i, r in enumerate(filtered)
        ]
        history_list.update()
        count_text.value = f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {len(filtered)}"
        count_text.update()

    # –°–ø–∏—Å–æ–∫ –¥–ª—è –∂—É—Ä–Ω–∞–ª—É –∑–º—ñ–Ω –∑ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è–º
    history_list = ft.ListView(
        controls=[],
        expand=True,
        spacing=6,
        auto_scroll=False
    )
    count_text = ft.Text("")

    def update_table(e=None):
        filtered = apply_filters()
        history_list.controls = [
            ft.Container(
                ft.Row([
                    ft.Text(str(r[0]), width=40, size=12, color="#888"),
                    ft.Text(str(r[1]), width=80, size=12),
                    ft.Text(r[2], width=60, size=12, color="#2b5" if r[2]=='add' else ("#b52" if r[2]=='delete' else "#258")),
                    ft.Text(r[3][:19], width=120, size=12, color="#888"),
                    ft.Text(r[4], size=12),
                ], spacing=8),
                bgcolor="#f7f7f7" if i%2==0 else None,
                padding=6,
                border_radius=6
            ) for i, r in enumerate(filtered)
        ]
        history_list.update()
        count_text.value = f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {len(filtered)}"
        count_text.update()


    # –î—ñ–∞–ª–æ–≥
    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text("–ñ—É—Ä–Ω–∞–ª –∑–º—ñ–Ω —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è"),
        content=ft.Container(
            ft.Column([
                ft.Row([filter_action, filter_inv, filter_date, ft.ElevatedButton("–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏", on_click=update_table)]),
                count_text,
                ft.Container(history_list, expand=True),
            ], scroll=ft.ScrollMode.AUTO),
            width=800
        ),
        actions=[ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()
    update_table()


def locations_dialog(page):
    from db import get_locations, add_location, edit_location, delete_location
    locations = get_locations()

    # –ü–æ–±—É–¥–æ–≤–∞ –¥–µ—Ä–µ–≤–∞ –º—ñ—Å—Ü—å
    def build_tree(locations, parent_id=None):
        nodes = []
        for loc in filter(lambda l: l[2] == parent_id, locations):
            children = build_tree(locations, loc[0])
            nodes.append(
                ft.Row([
                    ft.Text(loc[1], size=16),
                    ft.IconButton(content=ft.Text("‚úèÔ∏è"), tooltip="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", on_click=lambda e, l=loc: edit_location_dialog(page, l)),
                    ft.IconButton(content=ft.Text("üóëÔ∏è"), tooltip="–í–∏–¥–∞–ª–∏—Ç–∏", on_click=lambda e, l=loc: delete_location_confirm(page, l)),
                ] + ([ft.Column(children)] if children else []))
            )
        return nodes

    def add_location_dialog(page, parent_id=None):
        name = ft.TextField(label="–ù–∞–∑–≤–∞ –º—ñ—Å—Ü—è", width=200)
        def on_save(e):
            try:
                add_location(name.value, parent_id)
                page.dialog.open = False
                page.update()
                locations_dialog(page)
                # –û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ –º—ñ—Å—Ü—å —É –¥—ñ–∞–ª–æ–≥–∞—Ö
                if hasattr(page, 'inventory_container'):
                    page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
                page.update()
            except Exception as ex:
                page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è: {ex}"), open=True)
                page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"),
            content=name,
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–î–æ–¥–∞—Ç–∏", on_click=on_save),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    def edit_location_dialog(page, loc):
        name = ft.TextField(label="–ù–∞–∑–≤–∞ –º—ñ—Å—Ü—è", value=loc[1], width=200)
        parent = ft.Dropdown(label="–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–µ –º—ñ—Å—Ü–µ", options=[ft.dropdown.Option(str(l[0]), l[1]) for l in locations if l[0] != loc[0]], value=str(loc[2]) if loc[2] else None, width=200)
        def on_save(e):
            try:
                edit_location(loc[0], name.value, int(parent.value) if parent.value else None)
                page.dialog.open = False
                page.update()
                locations_dialog(page)
            except Exception as ex:
                page.snack_bar = ft.SnackBar(ft.Text(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è: {ex}"), open=True)
                page.update()
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"),
            content=ft.Column([name, parent]),
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–ó–±–µ—Ä–µ–≥—Ç–∏", on_click=on_save),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    def delete_location_confirm(page, loc):
        def on_delete(e):
            delete_location(loc[0])
            page.dialog.open = False
            page.update()
            locations_dialog(page)
        page.dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text(f"–í–∏–¥–∞–ª–∏—Ç–∏ '{loc[1]}'?"),
            content=ft.Text("–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –º—ñ—Å—Ü–µ —Ç–∞ –≤—Å—ñ –ø—ñ–¥–º—ñ—Å—Ü—è?"),
            actions=[
                ft.TextButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update())),
                ft.TextButton("–í–∏–¥–∞–ª–∏—Ç–∏", on_click=on_delete),
            ],
            open=True
        )
        page.overlay.append(page.dialog)
        page.update()

    # –û—Å–Ω–æ–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –∑ –¥–µ—Ä–µ–≤–æ–º
    tree = build_tree(locations)
    add_btn = ft.ElevatedButton("–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–µ–Ω–µ–≤–µ –º—ñ—Å—Ü–µ", icon="‚ûï", on_click=lambda e: add_location_dialog(page, None))
    page.dialog = ft.AlertDialog(
        modal=True,
        title=ft.Text("–ú—ñ—Å—Ü—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è (—ñ—î—Ä–∞—Ä—Ö—ñ—è)"),
        content=ft.Column([add_btn] + tree, scroll=ft.ScrollMode.AUTO),
        actions=[ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()

def refresh_inventory(page):
    from db import get_inventory
    page.inv_state['inventory'] = get_inventory(
        sort_by=page.inv_state['sort_by'],
        ascending=page.inv_state['ascending'],
        filters={page.inv_state['filter_field']: page.inv_state['filter_value']} if page.inv_state['filter_field'] and page.inv_state['filter_value'] else None
    )
    # —Å–ø–æ—á–∞—Ç–∫—É –∑—Ä–æ–±–∏–º–æ fade-out
    page.inventory_container.opacity = 0
    page.inventory_container.update()
    # –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
    page.inventory_container.content = ft.Column(build_inventory_list(page), expand=True)
    # fade-in
    page.inventory_container.opacity = 1
    page.inventory_container.update()
    page.update()

def set_sort_field(page, field):
    page.inv_state['sort_by'] = field
    refresh_inventory(page)

def set_sort_order(page, ascending):
    page.inv_state['ascending'] = ascending
    refresh_inventory(page)

def set_filter_field(page, field):
    page.inv_state['filter_field'] = field
    refresh_inventory(page)

def set_filter_value(page, value):
    page.inv_state['filter_value'] = value
    refresh_inventory(page)

def clear_filters(page):
    page.inv_state['filter_field'] = None
    page.inv_state['filter_value'] = ''
    refresh_inventory(page)

# --- –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
def show_full_image(page, img_path: str):
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –≤–µ–ª–∏–∫–æ–º—É —Ä–æ–∑–º—ñ—Ä—ñ –≤ –¥—ñ–∞–ª–æ–∑—ñ."""
    if not img_path:
        return
    page.dialog = ft.AlertDialog(
        modal=True,
        content=ft.Image(src=img_path, width=800, fit=ft.ImageFit.CONTAIN),
        actions=[ft.TextButton("–ó–∞–∫—Ä–∏—Ç–∏", on_click=lambda e: (setattr(page.dialog, 'open', False), page.update()))],
        open=True
    )
    page.overlay.append(page.dialog)
    page.update()
